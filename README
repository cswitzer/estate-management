# Project Title

This project is designed to help me learn the basics and some advanced features of NextJS

## What I learned

- 9/04/2024

1. Separating django settings into base, local, staging, and production versions for easy, clean management
2. We need to specify which settings we are using in manage.py (os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local"))

- 9/05/2024

1. Adding apps into their own directory to keep them separated from all other configuration files
2.

- 9/10/2024

1. Setting up an optimized Dockerfile containing multistage builds
2. Creating and using an entrypoint so the Dockerfile can setup postgres before running the command from docker compose
3. Creating docker compose file to manage relationships, networks, and volumes between multiple containers
4. Creating volumes to map changes from my local filesystem to the one in the container
5. Using volumes to persist db data in my postgres container and mailpit container so that data is preserved when stopping containers
6. Praise Docker because I don't have to download postgres, mailpit, etc. to my own computer!
7. Use Makefiles to make running long commands easier

- 9/12/2024

1. Using yasg to generate automatic redoc documentation for all my API endpoints
2. It is best practice to setup a custom user manager to add fields we think are important for the user class
3. We need to modify the UserChangeForm and UserCreationForm to account for new fields we added to user class
4. Difference between AbstractUser and AbstractBaseUser
   - AbstractUser -> Includes base functionality of the default Django User model like username, first_name, last_name, email, is_staff, is_superuser, and date_joined. Much easier to extend but provides less flexibility
   - AbstractBaseUser -> Provides only core authentication functionality like password and last login without username and email. Harder to extend but provides much more flexibility
5. How to create custom user model, specifying required fields and the username field
6. Creating a custom user admin class using (BaseUserAdmin), specifying which fields the add and edit forms have

- 10/14/2024

1. How to configure celery from the core/config app using local settings

- 10/16/2024

1. How to configure a Dockerfile for a React/NextJS application
2. How to configure a reverse proxy and load balancer using nginx
3. I can now make requests to just localhost:8080, and nginx will route everything for me! That's super cool

- 10/18/2024

1. Use anchors to copy configuration from one service to another
2. The above point is useful when configuring celery, celerybeat, and flower because:
   - Reduces redundancy and ensures consistency
   - Ensures environment variables are shared between the services
   - Settings are also shared between all the services to access the same models, db, etc.
   - We also inherit the same volumes, which is useful for persisting data to the same place
3. Configure watchfiles to restart celery, beat, and flower when python files change

- 10/19/2024

1. It is good practice to make the user model only handle authentication rather than user details
2. For the above point, any extra user details are best kept in a profile class
3. Use forward references in Python if type hinting for a type which has not:
   - been declared yet
   - is declared, but is beneath the where it is being referenced
4. Use slug fields and url patterns set the format <name:slug> to have human readable urls
5. Use post save signals to trigger events when models are saved (e.g. create profile on saving a new user)

- 10/20/2024

1. Override JWTAuthentication class to retrieve access token from http only cookies

- 10/21/2024

1. Configuring djoser with simple jwt to specify how user will authenticate with our system
2. Configuring settings for Google OAuth2, plus extra fields like first and last name
3. Using httponly cookies as an authentication method to ensure JavaScript cannot get tokens from localStorage
4. Use google oauth2 to authenticate with Django backend

- 10/29/2024

1. Create custom "current_user" serializer to get profile object's data for current user
2. DRF serializer fields can specify a source the data comes from, such as profile.gender, which refers to the profile tied to the user
3. Create a renderer, in which we specify the format the json data will be in when returned to the user
4. Create a generic renderer class to dynamically set the object label and consistently format json response among all views
5. Create shared_app celery tasks so that tasks is not bound only to one app in the project
6. Use celery tasks to make applications more responsive (task will be handled in the background so user is free to do other things)
7. Use django celery beat to register periodic tasks within any time period

- 12/03/2024

1. Fields in DRF are the only included fields in serialization (viewing) and deserialization (updating and creating)
