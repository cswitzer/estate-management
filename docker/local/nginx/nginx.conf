upstream api {
    # from the docker-compose service name
    server api:8000;
}

map $http_upgrade $connection_upgrade {
    default upgrade; # if Upgrade header is present from request, set the connection to it
    '' close;        # if not, close the connection
}

upstream client {
    server client:3000;
}

# Reverse proxy for the API
server {
    # Listen on port 80 (http)
    listen 80;

    # client request body can be up to 20MB or they will get a 413 error
    client_max_body_size 20M;

    # log errors on our machine to /var/log/nginx/error.log
    error_log /var/log/nginx/error.log error;

    # Set host header to the original host header from the client
    proxy_set_header Host $host;

    proxy_set_header X-Real-IP $remote_addr;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;

    proxy_set_header Connection $connection_upgrade;

    # requests to /api/v1 will be forwarded to the api service defined above
    location /api/v1 {
        proxy_pass http://api;
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
    }

    location /supersecret {
        proxy_pass http://api;
        access_log /var/log/nginx/admin_access.log;
    }

    location /redoc {
        proxy_pass http://api;
    }

    location / {
        proxy_pass http://client;
    }

    # from STATIC_URL in the Django settings
    location /static/ {
        alias /app/staticfiles/; # from the docker-compose volume
        expires 30d;
        add_header Cache-Control "public max-age=2592000";
    }
}